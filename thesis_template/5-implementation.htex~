\chapter{Development}
In this section we describe in details: \\
- project scope \\
- project targets \\
- approach/methodology \\
- design/development process \\


\section{Scope}
- Here we narrow down the scope of the project 
- From a broad electronic election improvement to a particular plan. \\
- Recap: The purpose of the project is to improve electronic election. \\
- The particular improvement we are making is a better election trustworthiness\\
- Trustworthiness can be improved by a guarantee that an election is done right\\
- Out of all electronic election properties to improve we select integrity \\
- We want a provide a guarantee election integrity. \\
- Impossible to guarantee integrity of all elections, since elections are different \\
- So a integrity guarantee is provided for a particular election \\
- We suggest a method how to provide a guarantee of integrity for an election\\ 
- This method can be used for different elections\\
- The method is to build an election verifier\\
- Such that, this verifier is itself proven end-to-end correct\\
- Such verifier would be different for different election\\
= We build such verifier for a chosen electronic election\\
- We demonstrate a generic techniques how build such individual correct verifier for an election\\
- To demonstrate this technique:
- We choose a particular election\\
- Build a proven correct verifier for it\\
- Use it to provide guarantee of election integrity\\
- This technique can be used to build a verifier that can guarantee integrity of of other elections.\\
- We run a verifier and obtain a guarantee of election integrity\\
\\
\textbf{Excluded}\\
We would like to clarify what falls outside the scope of our election verification process. \\
- not all election integrity properties are universally verifiable\\
- cast-as-intended is not universally verifiable\\
- it is individually verifiable\\
- i.e. every voter has to check themselves\\
- because the public evidence data contains encrypted vote\\
- no one else can check if it matches the intended vote except the voter.\\ 
- This is due to privacy; published data does not reveal what was the original vote\\
- so we cannot check if the encryption contain the value that a voter had chosen.\\
- potentially the encrypted data could have been replaced by encryption of other vote.\\
- we can verify if the encrypted vote is a valid vote, i.e. within allowed range.
\\
We aim to check only integrity, however there are a strong number of other crucial properties of election:\\
we do not aim to control all of them.\\
Our election verification does not include:\\
\begin{itemize}
\item Security and privacy checks
\item Verification of the correctness of Helios code
\item Verification of participation privacy
\item Verification that only ballot from eligible voters were tallied, i.e. ballot stuffing [reference]
\item Verify absence of other fraudulent activities
\end{itemize}
Excluded the ability to verify other elections with the same verifier.
\\

\textbf{Included}\\
- We want check the following universally verifiable election properties: 
- (as described in the literature on electronic voting)
\begin{compactenum}
\item Verification that the encryption of the vote is correct \\
(we do not know if it is a real voters choice)\\
\item Verification that voters’ choices have been collected correctly.
\item Verification that the results have been computed correctly using the individual voters’
choices.
\end{compactenum}
Helios Voting System publishes cryptographic evidence data for verification. If the this evidence passes the checks mentioned above, it guarantees that the published results are correct.



\textbf{Target}\\
- We demonstrate a technique we select a particular election.\\
- Namely Helios IACR director 2022.\\
- reasons for select Helios Voting\\
- it is an open source platform: assess to code and specifications\\
- it has been subjected to extensive scientific research:\\
- many errors having been revealed and fixed.\\\citep{Bernhard2012HowNT, Bernhard2011AdaptingHF, ChangFong2016TheCS}
- suggested improvement implemented\\
- Helios is one of the most evolving electronic election platform.\\
- International Association for Cryptologic Research (IACR) uses Helios Voting for its director elections\\
- this privides confidence in its security and reliability.\\
- Our work largely rests on top of  what \cite{Haines2019VerifiedVF} has done\\
- They used Helios election, so it is natural to continue using the same election platform\\
\\


\textbf{Assumptions}\\
Before we begin we made some assumption about the election system and protocol
- We assume that:
- Cryptography parameters have been chosen correctly (Described in Background)\\
- Namely: p is a large prime,\\
- Largest subgroup of modular p has order of prime q, \\
- discrete logs of that group are unknown\\
- private keys are kept in secret\\
- published election data is not fake\\
What else did we assume?\\

\section{Approach}
In this section we describe how we approach the task. 
In general follow the logical steps developed by Thomas \cite{Haines2019VerifiedVF} with the main difference that we are using verified tools, such as HOL and CakeML. For the purpose of structured delivery we separate the development into logical phases, however, in practice these stages are not sequential and interleaving. We explain the general approach from high level first and then dive into each step and give more explanation.

High level plan:\\
1. Download election data \\
2. Construct a verifier for election\\
3. Prove that our verifier is correct\\
4. Run the verifier with feeding the data through and expect positive outcome.\\

We use HOL theorem prover environment for the main part of work, such as data types and functions definitions and theorem proving.  We use CakeML only for instantiating and compiling final Election Verifier function. This approach guarantees correct operation of the compiled executable in the following way. HOL has been proven to only be able to accept correct proof. This fact guarantees correctness of the theorems about the code. Theorems about the code guarantee the correctness of the code of election verifier and CakeML compiler guarantees the compiled executable program operates according to the written code. Naturally, the question arises, how do we know that the theorems we prove suffice the correctness requirements, or even about the correctness. One could bring few theorems that are trivially true all the time, prove them and claim the correctness of the executable. \\
In our case, we define our correctness requirements by the theorems about sigma protocol. Since Helios Election (according to its specification) uses Zero Knowledge Sigma Protocol we can use the theorems.

We adopt definitions of the theorems from Thomas \cite{Haines2019VerifiedVF} and refer the definition.

Detailed plan:\\
1. Download data:\\
- Helios system provides election data available for audit\\
- This data can be used to verify the integrity of the election. \\
- The data is encrypted, so there is no chance for us to know any private information. \\
- The encryption is done according to some cryptography protocols. \\
- The protocol is defined in specification for Helios.\\

2. Construct verifier for election: \\
- In order to verify election integrity we need to 
- use public evidence data
- repeat calculations performed by some cryptography protocol \\
- and obtain the same result\\
- To do so we construct our own eleciton protocol that does the same as Helios system\\
- Since Helios is an open source system, Helios system protocol specs are available.\\
- First we create building blocks (elementary components)\\
- Then we compose protocols from those components \\
- Create election verifier using functionality of the protocol.\\
- Protocol functionality is using abstract data types and not computationally efficient\\
- Construct computationally efficient function that uses machine type data, equivalent of the verifier\\
- Instantiate election verifier using cakeML and compile it\\

3. Prove that our election verifier is correct \\
- We need to prove that final executable verifier is correct \\
- We define the properties of the verifier that are required verifier to be correct.\\
- Then we prove these properties for elementary components \\
- Then we prove that combining components preserve the required properties\\
- Then we prove that our resulting protocol is correct by invoking the correctness of the components\\
- Then we prove that computationally efficient verifier is equivalent to the instance of abstract election verifier.\\

4. Run election verification\\
- Restructure downloaded data, so it easily to feed in\\
- Run the verifier\\

\section{Verifier fit to purpose}
Here we show that the verifier we build fit to purpose and does guarantee election integrity.\\
Here is a chain of argument that justifies that.\\
- If executable verifier is correct itself, it is suffices to guarantees election integrity by Rives[cite]. \\
- Executable verifier program behaves correctly because we compiled correct code with verified correct compiler\\
- Correct compiler guarantees preservation of correctness from the code to operation.\\
- The verifier is correct because it is contained within proven correct sigma protocol\\
- The sigma protocol is correct because we proved it correctness in HOL.\\
- HOL has been proven to be able to accept only correct proofs\\
- Hence the correctness proofs are valid as well.\\
- Sigma protocol is proven correct because we proved theorems required for correctness of sigma protocol.\\
- These theorems suffice for correctness because of definition of correct sigma protocol. [cite]\\

- Properties are required for sigma-protocol definition and one for ZK definition.\\
- Completeness, Special Soundness, Simulator Correctness, Zero-Knowledge [cite Haines Bellare Gold..]\\
- Completeness property states that an honest prover, who knows the necessary secret information related to the statement, always convinces an honest verifier that the statement is true. \\
- this property protects from dishonest verifies who do not accept a valid proof.
- Special Soundness means that a party can't prove a false statement. Special soundness states that if an attacker intercepts two valid transcripts of the protocol, one between Alice and Bob and another between Alice and another verifier, then the chance that attacker can create a third valid transcript that proves a different statement, in negligible.
- In other words, the chance of making a false proof is at most the inverse of the size of the challenge space\\
- Simulator Correctness, states that a real transcript, that was generated by a valid interaction between proves and verifier, is indistinguishable from a simulator generated, that does not know a secret.
- "Indistinguishable" property should be formulated mathematically using probability distributions.
- Zero-Knowledge property states, that a verifier does not reveal any additional information except possession of the secret. 
- We adopt mathematical formulation of this property from \cite{Haines2019VerifiedVF}
\\
- By the above way argument our verifier provides a guarantee of the election integrity.\\


\section{Design}

- In order to redo calculations done by Helios Election 
- we construct cryptographic protocol with the same functionality as used in Helios election. 
- To do so we use the following elementary components adopted by Thomas \cite{Haines2019VerifiedVF} in Coq \\ - and implement them in HOL with minor adjustments. \\
- Abstract Sigma protocol \\
- Sigma Protocol combiners: \\
- Disjunctive combiner, \\
- Conjunctive combiner, \\
- Equality combiner. \\
- Schnorr Sigma protocol \\
\\
- To verify election we do not need to instantiate the whole protocol, we need just executable HonestVerifier.\\
- We use HenestVerifier function from our protocol to instantiate our Election Verifier. 
- A composit sigma protocol is driven by the public evidence data\\
- We construct a special Sigma protocol.
- Such protocol that its HonerstVerifier function signature matches the data published by Helios election.
- Since we aim to verify three properties of election we construct three special sigma protocols.


\section{Components}
- in this section we describe the components we use for our construction
- Sigma Protocol\\ 

\textbf{Abstract Sigma protocol}

- Explanation of the components of this definition:\\
- Theoretically, this sigma protocol is an abstract datatype and is not bounded to natural numbers. \\
- We start from displaying how this definition relates to sigma protocol interactions. \\
- On figure 1 we demonstrated the interaction on the defined sigma protocol\\



- Statements is a set of values where the statements belong.\\
- Witnesses is a set where the secrets belong.\\
- Relations is a binary function that returns if a secret and a statement is in relation.\\
- RandomCons is a set where random number for Prover belong.\\
- Commitments is set where commitments generated by prover belong.\\
- Challenges is a group where challenges of verifier belong.\\
- Disjoint is a binary function that is equivalent to inequality for Challenges. This function is required for composite 
protocols.\\
- Responses is a set where Prover's responses belong.\\
- $\text{Prover}_0$ is a function which is used by Prover party to compute commitment\\
- $\text{Prover}_1$ is a function which is used by Prover party to compute response\\
- $\text{HonestVerifier}$ is a function used by Verifier to accept transcript\\
- $\text{Extractor}$ is a an auxiliary function used for proofs, it takes two responses and two challenges and extracts a secret witness\\
- $\text{Simulator}$ is a an auxiliary function used for proofs\\
- $\text{SimulatorMap}$ is a an auxiliary function used for proofs\\
- $\text{SimulatorMapInverse}$ is a an auxiliary function used for proofs\\
- Note that type signature of Simulator matches HonestVerifier. \\
- This is to make it easier for HonestVerifier to accept Simulator output\\



$\text{Provver}_0: \lambda(s, w, r) = \begin{cases}

(c_1, c_2) 
& \text{if } \text{sp.Relation}(s_1, w) \\
& \quad \text{where } 
c_1 = \text{sp.Prover}_0(s_1, w, r),\\
& \quad \quad  
(\_, \  c_2, \  \_, \  \_) = \text{sp.Simulator}(s_2, r_t, r_e)\\

(c_1, c_2) 
& \text{otherwise } \\
& \quad \text{where } 
c_2 = \text{sp.Prover}_0(s_2, w, r)\\
& \quad \quad
(\_, \  c_1, \  \_, \  \_)  = \text{sp.Simulator}(s_1, r_t, r_e),\\

\end{cases}$


$\text{Provver}_0 = (\lambda (s, w, r). \begin{cases}

\end{cases})$






Disjunction Combiner,\\ 
Conjunction Combiner, \\
Equivalence combiner, \\
Schnorr protocol\\



\section{Theorems}
\textbf{What theorems do we need and why: specification}
\textbf{Well formed-ness}
Do not include proof of the theorems?
\textbf{Correctness}\\
\textbf{Simulator Correctness}\\
\textbf{Special soundness}\\
Include probabilistic part of the proof that is excluded from HOL?
\textbf{Zero Knowledge}\\
Auxiliary theorems \\



\section{Assembly}
Composed Sigma protocols\\
For encryption verification use sigma protocol  Disjunction Combiner of Equivalence combiner of SchnorrSP(p,q)
For decryption verification use sigma protocol Equivalence combiner of SchnorrSP(p,q)
For result verification use sigma protocol SchnorrSP(p,q)

\section{Compilation}
Abstract Verification function\\
Easy to prove, not easy to compile\\Inefficient function \\

Concrete verification function \\
Easy to compile, not easy to prove. \\
efficient function  \\

equivalence proof about efficient funciton calculate the same thing\\


\pagebreak %

