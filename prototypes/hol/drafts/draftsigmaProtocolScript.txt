
(* ------------------------------------------------------------------------- *)
(* -- Sigma Protocol -- *)
(* ------------------------------------------------------------------------- *)
(*
Me
print_match [] “n DIV m ≤ k”
print_match [] “$|/”
print_match [] “$MOD”  MOD_MULT_DIST
type_of “Schnorr_SP”
type_of “o” irule suffices_by
type_of “|/”
print_match [] “g.exp _ ( _ MOD _ )”
M-x replace-string
 ⊘
2298
\oslash
*)
       

(* add all dependent libraries for script *)
open HolKernel boolLib bossLib Parse;

(* declare new theory at start *)
val _ = new_theory "sigmaProtocol";

open jcLib;
open monoidTheory;
open monoidOrderTheory;
open groupTheory;
open groupOrderTheory;
open groupCyclicTheory;
open groupInstancesTheory;
open ringTheory;
open ringInstancesTheory;
open fieldTheory;
open fieldInstancesTheory;
open arithmeticTheory;
open congruencesTheory;
open helperNumTheory; 
open dividesTheory;

open pedersenCommitmentTheory;

(*overload operation to avod ambiguity*)   
Overload "_0_" = “(GF q).sum.id”; 
Overload "_1_" = “(GF q).prod.id”; 

Overload "⊕" = “(GF q).sum.op”;
val _ = set_fixity "⊕" (Infixl 500); 
Overload "⊖" = “ring_sub (GF q)”;
val _ = set_fixity "⊖" (Infixl 500); 
Overload "⊗" = “(GF q).prod.op”;
val _ = set_fixity "⊗" (Infixl 600); 
Overload "_/_" = “field_div (GF q)”;
val _ = set_fixity "_/_" (Infixl 600);

(* ------------------------------------------------------------------------- *)

Datatype: SigmaProtocol = <| Statements: 's set;
                             Witnesses: 'w set;
                             Relation: 's -> 'w -> bool;
                             RandomCoins: 'r set;
                             Commitments: 'c set;
                             Challenges:  'e set;
                             Responses: 't set;
                             Prover_0: 's -> 'w -> 'r -> 'c; (*why does it need w?*)
                             Prover_1: 's -> 'w -> 'r -> 'c -> 'e ->  't;
                             HonestVerifier: ('s # 'c # 'e # 't) -> bool;
                             Extractor: 't -> 't -> 'e -> 'e -> 'w;
                             Simulator: 's -> 't -> 'e -> ('s # 'c # 'e # 't);
                             SimulatorMap: 's -> 'w -> 'e -> 'r  -> 't;
                             SimulatorMapInverse: 's -> 'w -> 'e -> 't -> 'r;
                             |>
End

(*Correctness property: Correct Prover get accepted by Verifier*)
Definition Correct_SP_def:
  Correct_SP sp ⇔
    ∀s w r e. s ∈ sp.Statements ∧ w ∈ sp.Witnesses ∧ r ∈ sp.RandomCoins ∧ e ∈ sp.Challenges
                ∧ sp.Relation s w ⇒
                              let c =  sp.Prover_0 s w r in 
                                sp.HonestVerifier(s, c, e, sp.Prover_1 s w r c e)
                                        
End

(*Special soundness: Prover has the knowledge,
i.e. there exist an extracrot s.t. it can get knowledge form prover*)
Definition SpecialSoundness_SP_def:
  SpecialSoundness_SP sp ⇔
  ∀s c e1 e2 t1 t2.
     s ∈ sp.Statements ∧
     c ∈ sp.Commitments ∧
     t1 ∈ sp.Responses ∧
     t2 ∈ sp.Responses ∧
     e1 ∈ sp.Challenges ∧
     e2 ∈ sp.Challenges ∧
     (e1 ≠ e2) ∧ 
     sp.HonestVerifier(s, c, e1, t1) ∧
     sp.HonestVerifier(s, c, e2, t2) ⇒
                    sp.Relation s (sp.Extractor t1 t2 e1 e2)
End


Definition SimulatorCorrectness_SP_def:
  SimulatorCorrectness_SP sp ⇔
  ∀s t e.
     s ∈ sp.Statements ∧
     t ∈ sp.Responses ∧
     e ∈ sp.Challenges ⇒
     sp.HonestVerifier(sp.Simulator s t e)
End

Definition HonestVerifierZeroKnowledge_SP_def:
   HonestVerifierZeroKnowledge_SP sp ⇔
  ∀s w r e t.
     s ∈ sp.Statements ∧
     w ∈ sp.Witnesses ∧
     r ∈ sp.RandomCoins ∧
     e ∈ sp.Challenges ∧
     t ∈ sp.Responses ∧
     sp.Relation s w ⇒
     let c =  sp.Prover_0 s w r;
         spm = sp.SimulatorMap s w e;
         spmi = sp.SimulatorMapInverse s w e;
     in
       (s, c, e, sp.Prover_1 s w r c e) = sp.Simulator s (spm r) e ∧
       spmi(spm r) = r ∧
       spm(spmi t) = t
End
    
        

Definition Schnorr_SP_def:
  Schnorr_SP gr q =  <|Statements:= gr.carrier × gr.carrier;
                      Witnesses:= count q;
                      Relation:= (λ (s1, s2) w. monoid_exp gr s1 w = s2); (* How does Relation know the group operation? *)
                      RandomCoins:= count q;
                      Commitments:= gr.carrier;
                      Challenges:= count q;
                      Responses:= count q;
                      Prover_0:= (λ (s1, s2) w r. monoid_exp gr s1 r);
                      Prover_1:= (λ (s1, s2) w r c e. r ⊕ e ⊗ w);
                      HonestVerifier:= (λ ((s1, s2), c, e, t). monoid_exp gr s1 t = gr.op c  (monoid_exp gr s2 e)); 
                      Extractor:= (λ t1 t2 e1 e2. (t1 ⊖ t2) _/_ (e1 ⊖ e2));
                      Simulator:= (λ (s1, s2) t e. ((s1, s2), gr.op (monoid_exp gr s1 t) (gr.inv (monoid_exp gr s2 e)), e ,t);
                      SimulatorMap:= (λ (s1, s2) w e r.  r ⊕ e ⊗ w);
                      SimulatorMapInverse:=  (λ (s1, s2) w e t. t ⊖ e ⊗ w);
                     |> 
End
        

        
(*Define special soundness property for general protocol*)
Theorem schnorr_correctness_thm: 
  prime q ∧ cyclic g ∧ FINITE g.carrier ∧ (order g (cyclic_gen g) = q) ⇒ 
  Correct_SP (Schnorr_SP g q)
Proof
  simp[Schnorr_SP_def, Correct_SP_def, pairTheory.FORALL_PROD] >>
  rpt strip_tac >>
  rename [‘g.exp p w ∈ g.carrier’] >>
  ‘Group g’ by gs[cyclic_def] >>
  simp[group_exp_add, group_exp_mult, GF_eval] >>
  fs[GSYM group_exp_mult, Excl "monoid_exp_mult", GSYM group_exp_add, Excl "monoid_exp_add"] >>
  qabbrev_tac ‘x = r + e * w’ >> 
  qabbrev_tac ‘g' = cyclic_gen g’ >>
  qabbrev_tac ‘LHS =  g.exp p (x MOD q)’ >>
  qabbrev_tac ‘RHS = g.exp p x’ >>    
  ‘∃n. p = monoid_exp g g' n’ by metis_tac[cyclic_element] >>
  ‘LHS =  g.exp (g.exp g' n) (x MOD q)’ by rw[] >>
  ‘g' IN g.carrier’ by metis_tac[cyclic_gen_element] >>  
  ‘LHS = g.exp g' (n * (x MOD q))’ by metis_tac[GSYM group_exp_mult, Excl "monoid_exp_mult"] >> 
  qabbrev_tac ‘k =  n * x MOD q’ >>
  ‘0 < order g g' ’ by rw[] >>
  ‘LHS = g.exp g' (k MOD (order g g'))’ by metis_tac[GSYM group_exp_mod] >>
  qabbrev_tac ‘kmodq = k MOD (order g g')’ >>
  ‘kmodq = ((n * x MOD q) MOD q)’ by rw[] >>
  ‘kmodq = ((n MOD q) * (x MOD q) MOD q) MOD q’ by metis_tac[MOD_TIMES2] >>
  ‘kmodq = ((n MOD q) * (x MOD q)) MOD q’ by metis_tac[MOD_MOD] >>
  ‘kmodq = (n * x)  MOD q’ by metis_tac[MOD_TIMES2] >>
  ‘LHS = g.exp g' ((n*x)MOD q)’ by rw[] >>
  ‘LHS = g.exp g' (n*x)’ by metis_tac[group_exp_mod] >>
  ‘RHS = g.exp (g.exp g' n) x’ by rw[] >>
  ‘RHS = g.exp g' (n * x)’ by metis_tac[GSYM group_exp_mult, Excl "monoid_exp_mult"] >>
  ‘LHS = RHS’ by rw[]
QED


        

Theorem schnorr_special_soundness_thm: 
  prime q ∧ cyclic g ∧ FINITE g.carrier ∧ (order g (cyclic_gen g) = q) ⇒ 
  SpecialSoundness_SP (Schnorr_SP g q)
Proof
   simp[Schnorr_SP_def,  SpecialSoundness_SP_def, pairTheory.FORALL_PROD] >>
   rpt strip_tac >>
   ‘Group g’ by metis_tac[cyclic_def] >>
          
   qabbrev_tac ‘y1 = g.exp p_2 e1’ >>
   qabbrev_tac ‘z1 = g.exp p_1 t1’ >>
   ‘y1 ∈ g.carrier’ by metis_tac[group_exp_element] >>
   ‘z1 ∈ g.carrier’ by metis_tac[group_op_element] >>
   ‘c = g.op z1 ((monoid_inv g) y1)’ by metis_tac[group_lsolve] >>

   qabbrev_tac ‘y2 = g.exp p_2 e2’ >>
   qabbrev_tac ‘z2 = g.exp p_1 t2’ >>
   ‘y2 ∈ g.carrier’ by metis_tac[group_exp_element] >>
   ‘z2 ∈ g.carrier’ by metis_tac[group_op_element] >>
   ‘c = g.op z2 ((monoid_inv g) y2)’ by metis_tac[group_lsolve] >>
   ‘g.op z1 (g.inv y1) =  g.op z2 (g.inv y2)’ by rw[] >>
   ‘g.inv y2 ∈ g.carrier’ by metis_tac[group_inv_element] >>
   ‘g.inv y1 ∈ g.carrier’ by metis_tac[group_inv_element] >>
   ‘g.inv y2 ∈ g.carrier’ by metis_tac[group_inv_element] >>
   ‘z2 =  g.op c (g.inv (g.inv y2))’ by metis_tac[group_lsolve, group_inv_inv] >>
   ‘z2 =  g.op c y2’ by metis_tac[group_lsolve, group_inv_inv] >>
   ‘AbelianGroup g’ by metis_tac[cyclic_group_abelian] >>
   ‘z2 =  g.op y2 c’ by metis_tac[AbelianGroup_def] >>
   ‘z2 =  g.op y2 (g.op z1 ((monoid_inv g) y1))’ by rw[] >>
   ‘z2 =  g.op y2 (g.op z1 ((monoid_inv g) y1))’ by rw[] >>   
   ‘z2 =  g.op (g.op y2 z1) ((monoid_inv g) y1)’ by metis_tac[group_assoc, AbelianGroup_def] >>
   ‘g.op y2 z1 =  g.op z2 (g.inv (g.inv y1))’ by metis_tac[group_lsolve,group_op_element] >>
   ‘g.op y2 z1 =  g.op z2 y1’ by metis_tac[group_inv_inv] >>
   qabbrev_tac‘h = cyclic_gen g’ >>
   ‘h = cyclic_gen g’ by rw[] >>
   ‘h ∈ g.carrier’ by metis_tac[cyclic_gen_def] >>
   ‘q = CARD g.carrier’ by metis_tac[cyclic_gen_order] >>
      
   ‘∃i. i < q ∧ p_1 = g.exp h i’ by metis_tac[cyclic_element_by_gen, Abbr‘h’] >>
   ‘z1 = g.exp (g.exp h i) t1’ by rw[] >>
   ‘z1 = g.exp h (i*t1)’ by metis_tac[group_exp_mult]  >>
   ‘z2 = g.exp (g.exp h i) t2’ by metis_tac[] >>
   ‘z2 = g.exp h (i*t2)’ by metis_tac[group_exp_mult]  >>
       

   ‘∃j. j < q ∧ p_2 = g.exp h j’ by metis_tac[cyclic_element_by_gen, Abbr‘h’] >>
   ‘y1 = g.exp (g.exp h j) e1’ by rw[] >>
   ‘y1 = g.exp h (j*e1)’ by   metis_tac[group_exp_mult] >>
   ‘y2 = g.exp (g.exp h j) e2’ by metis_tac[] >>
   ‘y2 = g.exp h (j*e2)’ by  metis_tac[group_exp_mult]   >>
   ‘g.op (g.exp h (j*e2)) (g.exp h (i*t1)) = g.op (g.exp h (i*t2)) (g.exp h (j*e1))’ by metis_tac[] >> 
   ‘g.exp h (j * e2 + i * t1) = g.exp h (i * t2 + j * e1)’  by metis_tac[ group_exp_add] >>

   qabbrev_tac‘LHS =  g.exp h (j * e2 + i * t1)’ >>
   qabbrev_tac‘RHS =  g.exp h (i * t2 + j * e1)’ >>
   ‘0 < q’ by metis_tac[NOT_PRIME_0, NOT_ZERO]>>
   ‘LHS =  g.exp h ((j * e2 + i * t1) MOD q) ∧
    RHS =  g.exp h ((i * t2 + j * e1) MOD q)’ by metis_tac[group_exp_mod] >>
   ‘LHS ∈ g.carrier ∧ RHS ∈ g.carrier’ by metis_tac[group_exp_element] >>
  

    ‘cyclic_index g LHS  =  ((j * e2 + i * t1) MOD q) ∧
     cyclic_index g RHS = ((i * t2 + j * e1) MOD q)’ by metis_tac[finite_cyclic_index_unique, MOD_LESS] >>
   ‘((j * e2 + i * t1) MOD q)  =  ((i * t2 + j * e1) MOD q)’ by metis_tac[] >>
   ‘j ⊗ e2 ⊕ i ⊗ t1 = i ⊗ t2 ⊕ j ⊗ e1’ by metis_tac[MOD_PLUS, MOD_MOD, GF_eval] >>       
   ‘Field (GF q)’ by rw[GF_field] >>   
   ‘(i ⊗ t1) ⊖ (i ⊗ t2) = (j ⊗ e1) ⊖ (j ⊗ e2)’  by rw[GF_add_sub_identity, GF_eval] >>
   ‘i ∈ (GF q).carrier ∧
    j ∈ (GF q).carrier ∧
    t1 ∈ (GF q).carrier ∧
    t2 ∈ (GF q).carrier ∧
    e1 ∈ (GF q).carrier ∧
    e2 ∈ (GF q).carrier’ by metis_tac[GF_element] >> 
   ‘i ⊗ (t1 ⊖ t2) = j ⊗ (e1 ⊖ e2)’  by metis_tac[GF_mult_rsub] >>
   ‘(t1 ⊖ t2) ∈ (GF q).carrier’ by rw[] >>
   ‘(e1 ⊖ e2) ∈ (GF q).carrier’ by rw[] >>
   ‘(e1 ⊖ e2) ≠ _0_’ by metis_tac[GF_sub_not_eq_zero]>>
  ‘j ⊗ (e1 ⊖ e2) = i ⊗ (t1 ⊖ t2)’ by  metis_tac[Once EQ_SYM_EQ] >>
   ‘j ⊗ (e1 ⊖ e2) ∈ (GF q).carrier’ by rw[] >>
   qabbrev_tac‘d' = i ⊗ (t1 ⊖ t2)’ >>
   qabbrev_tac‘m' = (e1 ⊖ e2)’ >>
   ‘m' = (e1 ⊖ e2)’ by rw[] >>        
   ‘m' ≠ _0_’ by rw[] >>
   ‘d' = j ⊗ m' ∧ d' ∈ (GF q).carrier ∧ m' ∈ (GF q).carrier ∧ m' ≠ _0_’ by rw[] >>
    ‘d' _/_ m' = j’ by metis_tac[GF_mult_solve_eqn] >>
   ‘(i ⊗ (t1 ⊖ t2)) _/_ (e1 ⊖ e2) = j’ by metis_tac[] >>

       qmatch_abbrev_tac‘LHS1 = _’>>
     















      

   qabbrev_tac‘w =  ((t1 ⊕ (GF q).sum.inv t2) ⊗ Inv (GF q) (e1 ⊕ (GF q).sum.inv e2))’>>
   qabbrev_tac‘GLHS = g.exp p_1 w’>>
   qabbrev_tac‘GRHS = p_2’>>
   ‘w =  ((t1 ⊖ t2) _/_ (e1 ⊖ e2))’ by metis_tac[field_sub_def, field_div_def]>>
      ‘FINITE (GF q)’ by metis_tac[] >>




        
 ‘(i ⊗ (t1 ⊖ t2)) _/_ (e1 ⊖ e2) = j’ by metis_tac[GF_mult_solve_eqn] >>
      
                    
 
      ‘(d1 ⊖ d2) IN (GF q).carrier ∧ (m2 ⊖ m1) IN (GF q).carrier’ by rw[] 

      
print_match [] “$MOD”  MOD_MULT_DIST
type_of “⊖”




     
                   
‘cyclic_index g ’

                   
                   finite_cyclic_index_unique


group_exp_mod


         
   ‘g.op (g.exp p_2 e2) () =  g.op z2 y1’ by metis_tac[group_inv_inv] >>  
       


       
   rw[cyclic_generated_group, cyclic_gen_element, cyclic_gen_order] >>
           group_assoc    
   group_lsolve
   cyclic_gen_element
   cyclic_gen_order
   group_inv_element
       finite_cyclic_index_unique
  
QED

Theorem schnorr_honest_verifier_zk_thm: (*How to have group denoted as gr, what to do with G?*)
  ∀q. prime q ⇒ ∀g: 'a group. cyclic g ∧ FINITE G ∧ (ord (cyclic_gen g) = q) ⇒ 
  HonestVerifierZeroKnowledge_SP_def (Schnorr_SP g q)
Proof
QED

 


















         








  

(* Verifier_0:
get challenge e and backdoor d, e,d in {0,1}, e,d in Z_2^t, s.t. 2^t < q, 
commit to challenge c = h^d * k^e. Keeps d in secret. Does k have to be a generator as well? 
Sends commitment c *)

Definition verifier_0_def:
  verifier_0 (gr: 'a group) (h: 'a) d k e ⇔ commit (gr: 'a group) (h: 'a) d k e
End
      
(* Prover_0: get r,b in Z_q, 
compute message a = g^r * h^b 
send message a *)

Definition prover_0_def:
  prover_0 (gr: 'a group) (h: 'a) b g r ⇔ commit (gr: 'a group) (h: 'a) b g r
End

(* Verifier_1: open commitment by sending d,e. What does it mean 'to send' in proof?*)
Definition verifier_1_def:
  verifier_1 (gr: 'a group) (a: 'a) d, e ⇔ d, e
End

(* Prover_1: check commitment c == h^d * k^e
if True then send z = r + w * (e + b)
otherwise abort*)

Definition prover_1_def:
  prover_1 (gr: 'a group) (h: 'a) c d k e r w =
  if verify g h c d k e then r ⊕ w ⊗ (e ⊕ b)
  else 0
End

(* Verifier_2: checks g^z == a * h^e mod p 
if True then send Accept
otherwise abort
does this verification have to be hiding/binding?*)

Definition verifier_2:
  verifier_2 (gr: 'a group) (h: 'a) g z a e ⇔ (monoid_exp gr g z) = g.op a (monoid_exp gr h e)
End

(*Completness: 
probability that honest prover gets accepted by honest verifier > 1-(2^-t). ?
V2(P1(V1(P0(V0)))) *)
Theorem completeness_thm:
    ∀q. prime q ⇒ 
        ∀b d e w.
          b IN (GF q).carrier ∧
          d IN (GF q).carrier ∧
          e IN (GF q).carrier ∧
          w IN (GF q).carrier  ⇒
             ∀g: 'a group. cyclic g ∧ FINITE G ∧  (ord (cyclic_gen g) = q) ⇒
                   ∀k.(k IN G) ∧
  c = verifier_0(g (cyclic_gen g) d k e) ∧
  a = prover_0(g (cyclic_gen g) d k b) ∧          
  d, e = verifier_1 (gr: 'a group) (a: 'a) d, e ∧
  z = prover_1 (gr: 'a group) (h: 'a) c d k e r w ∧ z≠0 ⇒ 
  verifier_2 (gr: 'a group) (h: 'a) g z a e                                                      
Proof
  
QED

(*
    Soundness: 
    Prover does actually have knowledge of w if it can run the protocol 2 times. 
    There exist an extractor that is able to obtain w from Prover. 
    Essentially:
    g^z1 = a * h^e1 mod p and g^z2 = a * h^e2 mod p
    ...
    w = (z1-z2)/(e1-e2)
    In terms of prover:
    Verifier_2() and Verifier_2() imply w = (z1-z2)/(e1-e2) and h = g^w mod p
*)

Theorem soundness_thm:
  ∀q. prime q ⇒ 
      ∀b d e e' w.
                                    b IN (GF q).carrier ∧
                                    d IN (GF q).carrier ∧
                                    e IN (GF q).carrier ∧
                                    e' IN (GF q).carrier ∧
                                    e ≠ e' ∧
                                    w IN (GF q).carrier  ⇒
                                    ∀gr: 'a group. cyclic gr ∧ FINITE G ∧  (ord (cyclic_gen gr) = q) ⇒
                                                   ∀k.(k IN G) ∧ ∀h g. (h IN G ∧ g IN G ∧ h = monoid_exp gr g w)
                                                                       c = verifier_0(gr (cyclic_gen gr) d k e) ∧
                                                                       c' = verifier_0(gr (cyclic_gen gr) d k e') ∧
                                                                       a = prover_0(gr (cyclic_gen gr) d k b) ∧          
                                                                       d, e = verifier_1 (gr: 'a group) (a: 'a) d, e ∧
                                                                                                                   z = prover_1 (gr: 'a group) (h: 'a) c d k e r w ∧ z≠0 ∧
                                                                                                                   verifier_2 (gr: 'a group) (h: 'a) g z a e
                                                                                                                              z' = prover_1 (gr: 'a group) (h: 'a) c' d k e' r w ∧ z≠0 ∧
                                                                                                                   verifier_2 (gr: 'a group) (h: 'a) g z' a e' ⇒
                                                                                                                   w = (z ⊖ z') _/_ (e1 ⊖ e2)                          
                                                                                                                                
Proof
  
QED

(*
    Zero knowledge: 
    Verifier learns nothing except Prover's knowledge of the w. i.e.
    The simulated Prover gives the same result as the real one. i.e.
    distribution of a is the same as e,
    i.e. there exist bijection between a and e.
    get z with some distribution 
    get e with some distribution
    a = g^z * h^(-e)
    there exist a bijection between a and e

    Simulator correctness:
    V1(S)
*)
Theorem zeroKnowledge_thm:
  ∃ f: A -> E ∧ f bijection
                        
Proof
QED
        

          
val _ = export_theory();

