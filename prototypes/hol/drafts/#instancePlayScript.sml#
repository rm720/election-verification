
<<<<<<< HEAD
        
=======
>>>>>>> ea036b6b13319e73a7dccea67d3c849f73b77561
(* ------------------------------------------------------------------------- *)
(* Pedersen Commitment Scheme -- Binding and Hiding Properties               *)
(* ------------------------------------------------------------------------- *)


(*===========================================================================*)

(* add all dependent libraries for script *)
open HolKernel boolLib bossLib Parse;

(* declare new theory at start *)
val _ = new_theory "instancePlay";

(* ------------------------------------------------------------------------- *)

open jcLib;
open monoidTheory;
open monoidOrderTheory;
open groupTheory;
open groupOrderTheory;
open groupCyclicTheory;
open groupInstancesTheory;
(*
open ringTheory;
open ringInstancesTheory;
open fieldTheory;
open fieldInstancesTheory;
*)
open arithmeticTheory;
open congruencesTheory;
open helperNumTheory; 
open dividesTheory;
open mlstringTheory;
open mlintTheory;

<<<<<<< HEAD
(*overload operation to avod ambiguity*)   
(*
Overload "_0_" = “(GF q).sum.id”; 
Overload "_1_" = “(GF q).prod.id”; 
Overload "_+_" = “(GF q).sum.op”;

val _ = set_fixity "_+_" (Infixl 500); 
Overload "_-_" = “ring_sub (GF q)”;
val _ = set_fixity "_-_" (Infixl 500); 
Overload "_*_" = “(GF q).prod.op”;
val _ = set_fixity "_*_" (Infixl 600); 
Overload "_/_" = “field_div (GF q)”;
val _ = set_fixity "_/_" (Infixl 600);
*)

(* h^d * k^m *)
=======
open pedersenCommitmentTheory;


(* h^d * k^m *)
(*
>>>>>>> ea036b6b13319e73a7dccea67d3c849f73b77561
Definition commit_def:
  commit (g: 'a group) (h: 'a)  d k m = g.op (monoid_exp g h d) (monoid_exp g k m)
End                                          

Definition verify_def:
  verify (g: 'a group) (h: 'a) c d k m ⇔ commit g h d k m = c
End
<<<<<<< HEAD
=======
*)
>>>>>>> ea036b6b13319e73a7dccea67d3c849f73b77561

val _ = temp_overload_on("Z*", ``Zstar``);

(*assuming p is prime, and h mod p, k mod p  are generators*)
Overload z_commit = “λ p. commit (Z* p)”

<<<<<<< HEAD
(*
val crypto = process_topdecs
  `fun crypto u =
      let (*assume we read these numbers from input*)
        val commitment = a_commit 11 2 3 4 5 
        val ok = TextIO.print commitment
      in TextIO.output1 TextIO.stdOut #"\n" end`;

val b_commit_def =
Define ‘b_commit_def |> SIMP_RULE (srw_ss () ) [commit_def, FUN_EQ_THM, Zstar_def]’
*)

=======
>>>>>>> ea036b6b13319e73a7dccea67d3c849f73b77561
Theorem z_commit_thm:
  (*Assumptions*)
  h ≠ 0 ∧ h < p ∧ k ≠ 0 ∧ k < p ∧ prime p ⇒
  z_commit p h d k m = (h**d * k**m) MOD p
Proof
  simp[commit_def, FUN_EQ_THM, Zstar_exp, Zstar_carrier_alt]
QED

Definition z_code_def:
<<<<<<< HEAD
  z_code p a b c d = if p = 0 then 0 else (a**b * c**d) MOD p
End

        
(*
val Definition c_commit_def:
  c_commit = c_commit_def |> SIMP_RULE (srw_ss () ) [commit_def, FUN_EQ_THM, Zstar_def]
End      
        
EVAL “commit (Z* 11) 2 3 4 5 ”;
                                                         
EVAL “c_commit 101 123 145 167 189”;
EVAL “c_commit 101 198 176 154 132”;
EVAL “c_commit 101 238 376 454 521”;

val my_prime = 11;
val my_group = EVAL “Zstar my_prime”;
val d_commit = INST_TYPE [alpha |-> type_of “my_group”] commit_def;

val x = EVAL “commit my_group 2 3 4 5 ”;
    
val e_commit = INST_TYPE [alpha |-> ``:num group``] commit_def;
val e_commit = INST_TYPE [alpha |-> ``:num``] commit_def;
                          
group_order_property |> ISPEC ``(Z* p)``;
EVAL “Group”;
                                     
DB.match [] ``thm -> hol_type``;
  DB.match [] ``_ + _``;

val f_commit = Q.INST [alpha|-> “:num”] commit;
val th1 = Q.INST [`w`|->`T`] th1
  








                



atomic functionalities' requirements:
run
> find_large_prime length
12345678....123 
> commit large_prime generator key message opening 
123123...1287
> verify commitment_number, large_prime generator key message opening
True/False


what's_inside:
find_large_prime(length):
   prime_candidate = generate_number(length)
   is_prime = test_for_primality(prime_candidate)
   if is_prime:
      return prime_candidate
   else:
      return find_large_prime(length):

cpecs: find_large_prime program terminates,
       does not return composit number,
       does not retuen a number shorter than required length
       (are all the large primes equally safe?)
   

commit(large_prime generator key message opening):
   generate a group
   compute commitment

specs: binding

verify(commitment_number, large_prime generator key message opening):
    check
    commitment_number == commit(large_prime generator key message opening)
 
specs: hiding
       correct commitment is verified correctly. how is this defined mathematically?
*)

(*
Qestions:
Is num type ok, or we do need int?
How to get actual num value back?
How to declate p := int(11)?
group is not a hol_type, do we need to create a custom type using mk_type?
mk_type ("custom_group_type",[`:num group`]);

Next steps:
Generate Schnorr Group?
Need to prove that inputed number is prime? Can we assume it?
Define security propery in terms of probability?
Try to instantiate primality check AKS, Miller-Rabin?
Estimate the execution time?
Additional funcionality: generate a group: generate a numer and ensure primalirty.
Do we need to prove theorems on the instance level?
Proof that commitment is valid? For this scheme its immediate, will we use other
 *)




        


(*





        

          



(*instead of too strict field_mult_rinv_eqn*)   
val field_mult_solve_eqn = store_thm("field_mult_solve_eqn",
  “!r:'a field. Field r ==>
      !x y z. x IN R /\ y IN R /\ z IN R /\ y <> #0 ==>
              (x = z * y <=> x / y = z)”,
  rw[EQ_IMP_THM] >-
  simp[field_nonzero_eq, field_mult_assoc, field_mult_rinv] >>
  simp[field_nonzero_eq, field_mult_assoc, field_mult_linv]
);

        
val GF_mult_solve_eqn = store_thm("GF_mult_solve_eqn",
  “!q. prime q ==>
     !d m i. m IN (GF q).carrier /\
             d IN (GF q).carrier /\
             i IN (GF q).carrier /\ m <> _0_ ==>
             (d = i _*_ m <=>  d _/_ m = i)”,
  simp[GF_field, field_mult_solve_eqn]
);

         
val GF_sub_not_eq_zero = store_thm("GF_sub_not_eq_zero",
  “∀q. prime q ⇒
        ∀m1 m2.
          m1 IN (GF q).carrier ∧
          m2 IN (GF q).carrier ∧
          m2 ≠ m1 ⇒
          m2 _-_ m1 ≠ _0_”,
  rpt strip_tac >>
  ‘Field (GF q)’ by rw[GF_field] >>
  metis_tac[field_sub_eq_zero]
);

        
val GF_mult_rsub = store_thm("GF_mult_rsub",
  “∀q. prime q ⇒
        ∀m1 m2 i.
          m1 IN (GF q).carrier ∧
          m2 IN (GF q).carrier ∧
          i IN (GF q).carrier ⇒
          (i _*_ m2) _-_ (i _*_ m1) = i _*_ (m2 _-_ m1)”,
  rpt strip_tac >>
  ‘Field (GF q)’ by rw[GF_field] >>
  metis_tac[field_mult_rsub] 
);

  
val field_mult_not_zero = store_thm("field_mult_not_zero",
  “!r:'a field. Field r  ==>
               !d m i. d IN R ∧ m IN R ∧ i IN R ∧ d = i * m ∧ i ≠ #0 ∧ m ≠ #0 ==> (d ≠ #0)”,
  rpt strip_tac >>
  rw[] >>
  ‘i = #0 ∨ m = #0’ by metis_tac[field_mult_eq_zero]   
);

        
val GF_mult_not_zero = store_thm("GF_mult_not_zero",
  “∀q. prime q ⇒
         ∀d m i.
          m IN (GF q).carrier ∧ 
          d IN (GF q).carrier ∧ 
          i IN (GF q).carrier ∧
          d = i _*_ m ∧
          i ≠  _0_ ∧
          m ≠  _0_   ⇒ d ≠ _0_”,
  rpt strip_tac >>
  ‘Field (GF q)’ by rw[GF_field] >>
  metis_tac[field_mult_not_zero]   
);    


val GF_add_sub_identity = store_thm(
  "GF_add_sub_identity",
  “∀q. prime q ⇒
         ∀x y z t.
          x IN (GF q).carrier ∧ 
          y IN (GF q).carrier ∧
          z IN (GF q).carrier ∧
          t IN (GF q).carrier ∧
          x _+_ y = z _+_ t ⇒
          x _-_ z = t _-_ y”,
rpt strip_tac >>
‘Field (GF q)’ by metis_tac[GF_field] >>
metis_tac[field_add_sub_identity]
);


val GF_diff_mult_solve = store_thm("GF_diff_mult_solve",
 “∀q. prime q ⇒
         ∀d1 d2 m1 m2 i.
          d1 IN (GF q).carrier ∧ 
          d2 IN (GF q).carrier ∧
          m1 IN (GF q).carrier ∧
          m2 IN (GF q).carrier ∧
          i IN (GF q).carrier ∧
          m2 ≠ m1 ∧
          d1 _-_ d2 = i _*_ (m2 _-_ m1) ⇒
          (d1 _-_ d2) _/_ (m2 _-_ m1) = i”,
  rpt strip_tac >>
  ‘Field (GF q)’ by rw[GF_field] >>
  ‘m2 _-_ m1 ≠ _0_’ by metis_tac[GF_sub_not_eq_zero]>>
  ‘(d1 _-_ d2) IN (GF q).carrier ∧ (m2 _-_ m1) IN (GF q).carrier’ by rw[] >>
  metis_tac[GF_mult_solve_eqn]
);



val GF_pedersen_binding = store_thm("GF_pedersen_binding",
  “∀q. prime q ⇒ 
        ∀m1 m2 d1 d2.
          m1 IN (GF q).carrier ∧
          m2 IN (GF q).carrier ∧
          d1 IN (GF q).carrier ∧
          d2 IN (GF q).carrier ∧ 
          (m1 ≠ m2) ⇒
             ∀g: 'a group. cyclic g ∧ FINITE G ∧  (ord (cyclic_gen g) = q) ⇒
                   ∀k.(k IN G) ∧
                   verify g (cyclic_gen g) (commit g (cyclic_gen g) d1 k m1) d2 k m2 ⇒
                      (d1 _-_ d2) _/_ (m2 _-_ m1) = cyclic_index g k”,
                      
  simp[commit_def, verify_def, Excl "ring_sub_def", Excl "field_div_def"]>>
  rpt strip_tac >>
  qabbrev_tac ‘h = cyclic_gen g’ >>    
  ‘Group g’ by metis_tac[cyclic_def] >>      
  ‘cyclic_gen g IN G’ by metis_tac[cyclic_gen_element] >>          
  ‘(ord (cyclic_gen g)) =  CARD G’ by metis_tac[cyclic_gen_order] >>
  ‘∃i. i < q ∧ k = monoid_exp g h i’ by metis_tac[cyclic_element_by_gen] >>
  ‘cyclic_index g k = i’ by metis_tac[finite_cyclic_index_unique] >> 
  ‘h IN G’ by fs[cyclic_gen_element, Abbr`h`] >>
  ‘i IN (GF q).carrier’ by rw[GF_eval] >>
  fs[GSYM  group_exp_mult, Excl "monoid_exp_mult", GSYM group_exp_add, Excl "monoid_exp_add",
     Excl "ring_sub_def", Excl "field_div_def"] >>
  ‘0 < q’ by metis_tac[NOT_PRIME_0, NOT_ZERO] >>           
  ‘monoid_exp g h ((d2 + i * m2) MOD q) = monoid_exp g h ((d1 + i * m1) MOD q)’ by metis_tac[group_exp_mod] >>
  qabbrev_tac ‘x2 = monoid_exp g h ((d2 + i * m2) MOD q)’ >>
  qabbrev_tac ‘x1 = monoid_exp g h ((d1 + i * m1) MOD q)’ >>            
   ‘x2 IN G ∧ x1 IN G’ by fs[Abbr`x2`, Abbr`x1`] >>
   ‘((d2 + i * m2) MOD q) = cyclic_index g x2 ∧ ((d1 + i * m1) MOD q) = cyclic_index g x1’
    by metis_tac[finite_cyclic_index_unique, MOD_LESS] >>
  ‘((d2 + i * m2) MOD q) = ((d1 + i * m1) MOD q)’ by rw[]>>
   ‘d2 _+_ i _*_ m2 = d1 _+_ i _*_ m1’ by metis_tac[MOD_PLUS, MOD_MOD, GF_eval] >>                                ‘Field (GF q)’ by rw[GF_field] >>                     
   ‘d1 _-_ d2 = (i _*_ m2) _-_ (i _*_ m1)’  by rw[GF_add_sub_identity, GF_eval] >>
  ‘d1 _-_ d2 = i _*_ (m2 _-_ m1)’  by rw[GF_mult_rsub, GF_eval] >>
   prove_tac[GF_diff_mult_solve]  
 );

Theorem GF_pedersen_binding_prime = GF_pedersen_binding |> SIMP_RULE  (srw_ss () ) [verify_def]
  
                                   


val GF_pedersen_hiding = store_thm("GF_pedersen_hiding",
  “∀q. prime q ⇒  
        ∀m. m IN (GF q).carrier ⇒ 
            ∀g: 'a group. cyclic g ∧ FINITE G ∧ (ord (cyclic_gen g) = q) ⇒ 
                          ∀c k. c IN G ∧ k IN G  ⇒
                                  ∃d. d IN (GF q).carrier ∧
                                      c = commit g (cyclic_gen g) d k m”,  

  simp[commit_def]>>
  rw[] >>
  ‘∃i. i < CARD G ∧ c = monoid_exp g (cyclic_gen g) i’ by rw[cyclic_element_by_gen] >>
  ‘∃j. j < CARD G ∧ k = monoid_exp g (cyclic_gen g) j’ by rw[cyclic_element_by_gen] >>          
   rw[] >>
  ‘Group g’ by metis_tac[cyclic_def] >>
  rw[Once EQ_SYM_EQ] >> 
  rw[group_lsolve, cyclic_gen_element, cyclic_gen_order] >>
  rw[Once EQ_SYM_EQ] >>
  ‘monoid_exp g (monoid_exp g (cyclic_gen g) j) m IN G’ by rw[] >> 
  ‘monoid_inv g (monoid_exp g (monoid_exp g (cyclic_gen g) j) m) IN G’ by rw[group_inv_element] >>
  ‘(g.op (monoid_exp g (cyclic_gen g) i) (monoid_inv g (monoid_exp g (monoid_exp g (cyclic_gen g) j) m))) IN G ’
  by rw[group_op_element]>>
  qabbrev_tac
  ‘x = (g.op (monoid_exp g (cyclic_gen g) i) (monoid_inv g (monoid_exp g (monoid_exp g (cyclic_gen g) j) m)))’>>
  ‘∃d. d<CARD G ∧ x = monoid_exp g (cyclic_gen g) d’ by rw[cyclic_element_by_gen]>>
  ‘ord (cyclic_gen g) = CARD G’ by rw[cyclic_gen_order] >>
  ‘d ∈ (GF (CARD G)).carrier’ by rw[GF_eval]>>
  qexists_tac ‘d’>>
  rw[]
 );
              

val ZN_pedersen_hiding = store_thm("ZN_pedersen_hiding",
  “∀q. prime q ⇒  
        ∀m. m IN (ZN q).carrier ⇒ 
            ∀g: 'a group. cyclic g ∧ FINITE G ∧ (ord (cyclic_gen g) = q) ⇒ 
                          ∀c k. c IN G ∧ k IN G  ⇒
                                  ∃d. d IN (ZN q).carrier ∧
                                      c = commit g (cyclic_gen g) d k m”,  
  simp[commit_def]>>
  rw[] >>
  ‘∃i. i < CARD G ∧ c = monoid_exp g (cyclic_gen g) i’ by rw[cyclic_element_by_gen] >>
  ‘∃j. j < CARD G ∧ k = monoid_exp g (cyclic_gen g) j’ by rw[cyclic_element_by_gen] >>          
   rw[] >>
  ‘Group g’ by metis_tac[cyclic_def] >>
  rw[Once EQ_SYM_EQ] >>
  rw[ZN_def] >>  
  rw[cyclic_gen_order] >>
  rw[group_lsolve, cyclic_gen_element, cyclic_gen_order] >>
  rw[Once EQ_SYM_EQ] >>
  irule cyclic_element_by_gen >>
  simp[]
);
*)


Definition z_code_def:
=======
>>>>>>> ea036b6b13319e73a7dccea67d3c849f73b77561
  z_code p a b c d = if p = 0 ∨ a MOD p = 0 ∨ c MOD p = 0 then 0 else (a**b * c**d) MOD p
End

Definition z_code_string_def:
  z_code_string p a b c d = mlint$num_to_str (z_code p a b c d) ^ strlit"\n"
End

<<<<<<< HEAD
        
=======
(*
>>>>>>> ea036b6b13319e73a7dccea67d3c849f73b77561
Theorem crypto_math_spec:
  prime p ∧ a MOD p ≠ 0 ∧ c MOD p ≠ 0 ⇒ z_code p a b c d  = z_commit p (a MOD p) b (c MOD p) d
Proof
  rw[z_code_def, commit_def] >>
  simp[Zstar_exp,  Zstar_element]
QED
<<<<<<< HEAD
=======
*)

Theorem crypto_math_spec:
  
(*every component is correct: hiding, binding etc*)
(*algorithm of application of components is correct*)
  
Proof
  rw[z_code_def, commit_def] >>
  simp[Zstar_exp,  Zstar_element]
QED
>>>>>>> ea036b6b13319e73a7dccea67d3c849f73b77561
        
val _ = export_theory();        
                                  
